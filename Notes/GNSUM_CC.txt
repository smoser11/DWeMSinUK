

Excellent.  I want to talk about NSUM estimation using my RDS sample.  The sample is of Domestic Workers in the UK. 
  Please read 'GNSUM/Feehan and Salganik - 2016 - Generalizing the Network Scale-Up Method.pdf'


│ > Thank you.  I want to discuss the comment "...reconsider whether NSUM    │
│   is the appropriate method for                                              │
│     comparing to RDS prevalence estimates in this context."  I do not agree  │
│   but I could be wrong.  From the Feehan and Salganik 2016 (hereafter        │
│   FS16) paper we have the 'modified basic scale up' esimtator (equations 23  │
│   and 24), that only require a sample from the frame population, F.  If we   │
│   perform sensitivity analysis for the adjustmetn factors (e.g. their        │
│   Table 3), isn't NSUM appropriate? 



 > Excellent thank you.  Before you impliment anything I want to make sure I  │
│   understand the NSUM (and related GNSUM, modified, etc. etc.).  First,      │
│   both the basic scale up and the generalized scale up use the frame         │
│   population size, $N_F$, correct?  But it does not use the sample size in   │
│   the scalue up calculations.   Is this correct?   

Excellent. Thank you.  I want to discuss  the files `nsum_adjustment_factors.r` and 
`nsum_results_display.r`  Running both (and producing the objects `sensitivity_results` and `summary_analysis`) the nsum_results_display produce graphs and tables that do not make sense.  For example, this graph shows no change in the estimated size of the hidden population (note there are multiple indicators for membership in the hidden population).

Do not make any edits just yet.  We are just talking and problem solving right now.


OK, at this point we need to 'fork' the sensitivity analysis into two.



 > Further, the inclusion probabilities ($\pi_i$) are important (e.g. for     │
│   their equation 6).  Now, since we have an RDS sample I suggest we use      │
│   various weights produced by the `RDS` package -- properly re-scaled to    │
│   be inclusion probabilities -- in these calculations.  But importatnly, we  │
│   **do not** have visability estimates.  Does this make sense?  


│ > I think the $\pi_i$ need to sum to 1, right?  But generally, yes, you are  │
│   on the right track, especially using the weights (wt.RDS1_*, wt.vh_*,      │
│   wt.SS_*) (with respective population sizes ($N_F$)        

│ > Good.  Next make to use the rescaled bootstrap procedure of e.g. Rust and  │
│   Rao.  There is a CRAN package to do this:                                  │
│   https://cran.r-project.org/web/packages/surveybootstrap/index.html   With  │
│   this, please completely re-write nsum_results_display.r and                │
│   nsum_adjustment_factors.r to correctly perform ROBUST NSUM esimation       │
│   using my RDS sample.


### 20250912CC

> Thank you.  Your Steps are out of order (e.g. Step 1, Step 2, Step 1, Step 
  3, Step 4, Step 5, Step 6).  I think the problem lies in the 'second Step 
  1', which seems to give 0 valid NSUM and 1 valid RDS estimates. CI scenario 
  29 of 30 :  access_to_help , scheme: ss_980k 
  Survey bootstrap CI for access_to_help_rds ...
  Running survey bootstrap for access_to_help_rds with 500 replications...
  Generated 500 bootstrap samples
  Bootstrap completed: 0 valid NSUM estimates, 0 valid RDS estimates
  CI scenario 30 of 30 :  access_to_help , scheme: ss_980k 
  Survey bootstrap CI for access_to_help_rds ...
  Running survey bootstrap for access_to_help_rds with 500 replications...
  Generated 500 bootstrap samples
  Bootstrap completed: 0 valid NSUM estimates, 0 valid RDS estimates
  Enhanced results created with 9240 rows
  Step 3: Creating summary tables...
  Creating robust summary table...
  Creating robust sensitivity analysis table...
  Step 4: Creating visualizations...
  Creating robust NSUM vs RDS comparison plot...
  Creating robust sensitivity analysis plot...
  Creating inclusion probability analysis plot...
  Step 5: Saving results...
  Error saving comparison plot: Discrete values supplied to continuous scale. 
  Sensitivity plot saved successfully
  Inclusion plot saved successfully
  Step 6: Displaying results...



  Error in `scale_y_continuous()`:
  ! Discrete values supplied to continuous scale.
  ℹ Example values: NA, NA, NA, NA, and NA
  Run `rlang::last_trace()` to see where the error occurred.
  ⎿  5-hour limit reached ∙ resets 5pm
     /upgrade to increase your usage limit.



---


  Next, use Apendix D in the Online Apendix (/Users/  │
│   sm38679/Library/CloudStorage/Dropbox/zotero/storage/FT7AR9J6/Feehan\ and\  │
│   Salganik\ -\ 2016\ -\ Online\ appendix D.pdf  ) to perform senisitivity      │
│   analysis that show exactly how estimates will be affected by violations    │
│   of assumptions.      






----


The 'Symmetric Visibility Variant' is really excellent!  Yes!  We can use e.g. 'Q49. 5c6'  ('how_many_threat') or 'Q64. 5d11' ('how_many_labour_rights') or Q71 5f3 ('how_many_documents') or even 'Q83. 5f16' ('how_many_noNRM') and 'Q84. 5f15' ('how_many_NRM') as the number of people the survey respondant knows in the hidden population!





---



#%>>>>>>>>>>>>>>>>>>>>>>
#%>?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------- ----------------------------





library(RDS)
library(RDStreeboot)
library(surveybootstrap)
library(Neighboot)
library(dplyr)
library(purrr)


## FOR CHAIN RESAMPLING:

prepare_chain_bootstrap_inputs <- function(rds_data,
                                           id_col = "id",
                                           recruiter_col = "recruiter.id",
                                           degree_col = "known_network_size",
                                           traits = "trait_A",
                                           keep.vars = NULL) {
  # Ensure dplyr is loaded
  if (!require(dplyr, quietly = TRUE)) {
    stop("dplyr package is required for chain bootstrap")
  }

  # Step 1: Remove duplicate recruiter column if it exists
  if ("recruiter_id" %in% names(rds_data) && recruiter_col == "recruiter.id") {
    rds_data <- rds_data %>% select(-recruiter_id)
  }

  # Step 2: Create working copy and rename to expected structure
  rds_data_clean <- rds_data %>%
    rename(uid = !!sym(id_col),
           recruiter_id = !!sym(recruiter_col),
           degree = !!sym(degree_col))

  # Add required attributes for surveybootstrap
  attr(rds_data_clean, "key") <- "uid"
  
  # Step 2: Build recruitment chains
  seed_ids <- rds_data_clean$uid[rds_data_clean$recruiter_id == -1 | rds_data_clean$recruiter_id == "-1" | is.na(rds_data_clean$recruiter_id)]

  chains <- lapply(seed_ids, function(seed_id) {
    surveybootstrap:::make.chain(
      seed.id = seed_id,
      survey.data = rds_data_clean,
      is.child.fn = function(id, parent_id) {
        rds_data_clean$recruiter_id[rds_data_clean$uid == id] == parent_id
      }
    )
  })

  # Step 3: Estimate mixing model
  mm <- surveybootstrap:::estimate.mixing(
    survey.data = rds_data_clean,
    parent.data = rds_data_clean,
    traits = traits
  )

  # Step 4: Estimate degree distributions
  dd <- surveybootstrap:::estimate.degree.distns(
    survey.data = rds_data_clean,
    d.hat.vals = "degree",
    traits = traits,
    keep.vars = keep.vars
  )

  return(list(
    chains = chains,
    mm = mm,
    degree_dist = dd,
    processed_data = rds_data_clean
  ))
}


# # Example usage (commented out to prevent auto-execution when sourcing)
# # Suppose dd is your main data frame with known_network_size and exploitation traits
# chain_inputs <- prepare_chain_bootstrap_inputs(
#   rds_data = dd,
#   traits = c("document_withholding_rds", "pay_issues_rds"),
#   keep.vars = c("document_withholding_nsum", "pay_issues_nsum")
# )
#
# rds_sample$chains <- chain_inputs$chains
# rds_sample$mm <- chain_inputs$mm
# rds_sample$degree_dist <- chain_inputs$degree_dist




##############################################################################################
##############################################################################################
##############################################################################################



bootstrap_rds_sample <- function(rds_sample,
                                 method = c("tree", "neighboot", "chain", "simple", "ss"),
                                 B = 500,
                                 traits = NULL,
                                 degree_col = "q13",
                                 keep.vars = NULL,
                                 return_rds_df = TRUE,
                                 save_path = NULL,
                                 neighb_args = list(),
                                 verbose = TRUE) {
  
  method <- match.arg(method)
  
  # Load required packages
  if (method == "tree") requireNamespace("RDStreeboot")
  if (method == "neighboot") requireNamespace("Neighboot")
  if (method == "chain") requireNamespace("surveybootstrap")
  
  # If input is rds.data.frame, extract base data
  if ("rds.data.frame" %in% class(rds_sample)) {
    dd <- as.data.frame(rds_sample)
  } else if (is.data.frame(rds_sample)) {
    dd <- rds_sample
  } else {
    stop("Input must be data.frame or rds.data.frame")
  }
  
  # Setup common arguments
  id_col <- "id"
  recruiter_col <- "recruiter.id"
  
  # --- Method-specific bootstrap execution ---
  boot_list <- switch(method,
                      
                      # ------------------------------------------
                      "tree" = {
                        if (verbose) cat("Running Tree Bootstrap (actual resampling)...\n")

                        # Convert to rds.data.frame format if needed
                        if (!"rds.data.frame" %in% class(dd)) {
                          # Create proper rds.data.frame
                          rds_df <- dd
                          rds_df$wave <- 0  # Initialize wave

                          # Calculate waves based on recruitment structure
                          seeds <- which(rds_df[[recruiter_col]] == -1)
                          rds_df$wave[seeds] <- 0

                          # Simple wave calculation (could be improved)
                          for (wave in 1:10) {  # Max 10 waves
                            current_wave_ids <- rds_df[[id_col]][rds_df$wave == wave - 1]
                            if (length(current_wave_ids) == 0) break
                            next_wave_mask <- rds_df[[recruiter_col]] %in% current_wave_ids
                            rds_df$wave[next_wave_mask] <- wave
                          }

                          # Convert to rds.data.frame
                          rds_df <- RDS::as.rds.data.frame(rds_df,
                                                           population.size = 100000,  # Default population size
                                                           id = id_col,
                                                           recruiter.id = recruiter_col,
                                                           network.size = degree_col)
                        } else {
                          rds_df <- dd
                        }

                        # Perform tree bootstrap using source code from RDS package
                        bootstrap_samples <- tree_bootstrap_resamples(rds_df, traits, B, verbose)

                        if (return_rds_df) {
                          bootstrap_samples  # Already in rds.data.frame format
                        } else {
                          lapply(bootstrap_samples, as.data.frame)
                        }
                      },
                      
                      # ------------------------------------------
                      "neighboot" = {
                        if (verbose) cat("Running Neighborhood Bootstrap (actual resampling)...\n")

                        # Create edges data frame (exclude seeds and handle missing values)
                        valid_edges <- dd[[recruiter_col]] != -1 & !is.na(dd[[recruiter_col]])
                        edges_df <- data.frame(
                          node1 = dd[[recruiter_col]][valid_edges],
                          node2 = dd[[id_col]][valid_edges]
                        )

                        # Create sequential node IDs to avoid string issues
                        node_map <- setNames(1:nrow(dd), dd[[id_col]])

                        # Map edges to sequential IDs, handling any missing mappings
                        edge_node1_mapped <- node_map[as.character(edges_df$node1)]
                        edge_node2_mapped <- node_map[as.character(edges_df$node2)]

                        # Remove edges with unmapped nodes
                        valid_mappings <- !is.na(edge_node1_mapped) & !is.na(edge_node2_mapped)

                        # Prepare data in neighb format
                        neighb_data <- list(
                          nodes = 1:nrow(dd),
                          edges = data.frame(
                            node1 = edge_node1_mapped[valid_mappings],
                            node2 = edge_node2_mapped[valid_mappings]
                          ),
                          traits = if (!is.null(traits)) dd[, traits, drop = FALSE] else data.frame(dummy = rep(1, nrow(dd))),
                          degree = dd[[degree_col]]
                        )

                        # Perform neighborhood bootstrap using source code from Neighboot package
                        bootstrap_samples <- neighb_bootstrap_resamples(neighb_data, dd, B, verbose, id_col, recruiter_col)

                        if (return_rds_df) {
                          purrr::map(bootstrap_samples, ~ RDS::as.rds.data.frame(.x, id = id_col, recruiter.id = recruiter_col))
                        } else {
                          bootstrap_samples
                        }
                      },
                      
                      # ------------------------------------------
                      "chain" = {
                        if (verbose) cat("Running Chain Bootstrap (simplified approach)...\n")

                        # Ensure dplyr is available for chain bootstrap
                        if (!require(dplyr, quietly = TRUE)) {
                          stop("dplyr package is required for chain bootstrap")
                        }

                        # For now, use a simplified chain bootstrap approach
                        # This resamples recruitment chains rather than using surveybootstrap
                        bootstrap_samples <- chain_bootstrap_simple(dd, B, id_col, recruiter_col, traits, verbose)

                        if (return_rds_df) {
                          purrr::map(bootstrap_samples, ~ RDS::as.rds.data.frame(.x, id = id_col, recruiter.id = recruiter_col))
                        } else {
                          bootstrap_samples
                        }
                      },
                      
                      # ------------------------------------------
                      "simple" = {
                        if (verbose) cat("Running Simple IID Bootstrap...\n")
                        replicate(B, dd[sample(nrow(dd), replace = TRUE), ], simplify = FALSE)
                      },
                      
                      # ------------------------------------------
                      "ss" = {
                        stop("SS-bootstrap not yet implemented.")
                      }
  )
  
  if (!is.null(save_path)) {
    if (verbose) cat("Saving bootstrap samples to:", save_path, "\n")
    saveRDS(boot_list, file = save_path)
  }
  
  return(boot_list)
}

# =============================================================================
# ACTUAL BOOTSTRAP RESAMPLING FUNCTIONS (extracted from CRAN package source)
# =============================================================================

#' Tree Bootstrap Resampling Function
#'
#' Based on treeboot() function from CRAN/RDS/R/treeboot.R
#' Returns individual bootstrap samples instead of just confidence intervals
tree_bootstrap_resamples <- function(rds.data, traits = NULL, B = 500, verbose = TRUE) {

  # Extract information from rds.data.frame
  if (!is(rds.data, "rds.data.frame")) {
    stop("rds.data must be of type rds.data.frame")
  }

  network.size <- attr(rds.data, "network.size.variable")
  id <- RDS::get.id(rds.data)
  recruiter.id <- RDS::get.rid(rds.data)

  # Rationalize recruiter.id information
  recruiter.row <- match(recruiter.id, id)
  recruiter.row[is.na(recruiter.row)] <- 0
  n <- length(id)
  id.row <- 1:n
  seed.rows <- which(RDS::get.wave(rds.data) == 0)

  recruits <- lapply(id.row, function(i) which(recruiter.row == i))

  # Prepare all data for bootstrap (keep all variables)
  # Exclude only the structural RDS columns that will be recreated
  exclude_cols <- c("id", "recruiter.id", "wave", "network.size.variable")
  all_cols <- names(rds.data)
  data_cols <- setdiff(all_cols, exclude_cols)
  outcomes <- data.frame(rds.data)[data_cols]

  if (verbose) cat("  Tree bootstrap: resampling", B, "trees...\n")

  # Perform B bootstrap replicates
  bootstrap_samples <- list()
  for (b in 1:B) {
    if (verbose && b %% 100 == 0) cat("    Completed", b, "replicates\n")

    # Core tree bootstrap function (adapted from CRAN source)
    boot_sample <- tree_bootstrap_single(seed.rows, recruits, rds.data[[network.size]],
                                        outcomes, RDS::get.population.size(rds.data))
    bootstrap_samples[[b]] <- boot_sample
  }

  return(bootstrap_samples)
}

#' Single Tree Bootstrap Sample
#'
#' Adapted from treeboot() function in CRAN/RDS/R/treeboot.R
tree_bootstrap_single <- function(seed.rows, recruits, network.size, outcomes, population.size, fixed.size = TRUE) {

  resample <- function(x, size = length(x), replace = TRUE) {
    x[sample.int(length(x), size = size, replace = replace)]
  }

  n <- length(recruits)
  nseed <- length(seed.rows)

  samp.rows <- as.list(resample(seed.rows))
  samp.ids <- as.list(1:length(seed.rows))

  sample.id <- function(node.row, id, recr.id, wave) {
    if (is.null(node.row)) {
      recr <- resample(seed.rows)
      result <- list()
    } else {
      recr <- resample(recruits[[node.row]])
      result <- list(c(node.row, id, recr.id, wave))
    }
    for (i in seq_along(recr)) {
      result <- c(result, sample.id(recr[i], paste0(id, i), id, wave + 1))
    }
    result
  }

  if (fixed.size) {
    result <- list()
    boot.seeds <- 0
    boot.n <- 0
    while (TRUE) {
      seed <- resample(seed.rows, 1)
      tree <- sample.id(seed, as.character(boot.seeds), "_", 0)
      if (boot.n + length(tree) > n) {
        wave <- sapply(tree, function(x) as.numeric(x[4]))
        for (i in max(wave):1) {
          ntrim <- boot.n + length(tree) - n
          nw <- sum(wave == i)
          if (nw < ntrim) {
            tree[wave == i] <- NULL
            wave <- sapply(tree, function(x) as.numeric(x[4]))
          } else {
            ind <- resample(which(wave == i), ntrim, replace = FALSE)
            tree[ind] <- NULL
            break
          }
        }
      }
      result <- c(result, tree)
      boot.n <- length(result)
      boot.seeds <- boot.seeds + 1
      if (length(result) >= n)
        break
    }
  } else {
    result <- sample.id(NULL, "", NA, -1)
  }

  # Create bootstrap data frame
  df <- data.frame(row = sapply(result, function(x) as.numeric(x[1])),
                  id = sapply(result, function(x) x[2]),
                  recruiter.id = sapply(result, function(x) x[3]))
  df <- cbind(df, outcomes[df$row, , drop = FALSE])
  df$network.size.variable <- network.size[df$row]
  df$row <- NULL

  # Convert to rds.data.frame
  bootstrapped.data <- RDS::as.rds.data.frame(df,
                                             population.size = population.size,
                                             check.valid = FALSE)
  return(bootstrapped.data)
}

#' Neighborhood Bootstrap Resampling Function
#'
#' Based on Yauck et al. (2022) algorithm and CRAN/Neighboot/R/neighb.R
#' Returns individual bootstrap samples instead of just confidence intervals
neighb_bootstrap_resamples <- function(neighb_data, original_data, B = 500, verbose = TRUE, id_col = "id", recruiter_col = "recruiter.id") {

  if (verbose) cat("  Neighborhood bootstrap: resampling", B, "neighborhoods...\n")

  # Step 1: Identify recruiters and their neighborhoods
  recruiters <- original_data[original_data[[id_col]] %in% unique(original_data[[recruiter_col]][original_data[[recruiter_col]] != -1]), ]

  if (nrow(recruiters) == 0) {
    if (verbose) cat("    No recruiters found, falling back to simple bootstrap\n")
    bootstrap_samples <- replicate(B, original_data[sample(nrow(original_data), replace = TRUE), ], simplify = FALSE)
    return(bootstrap_samples)
  }

  # Create neighborhoods for each recruiter
  neighborhoods <- list()
  for (i in 1:nrow(recruiters)) {
    recruiter_id <- recruiters[[id_col]][i]
    recruits <- original_data[original_data[[recruiter_col]] == recruiter_id, ]

    # Neighborhood = recruiter + their direct recruits
    neighborhood <- rbind(recruiters[i, ], recruits)
    neighborhoods[[i]] <- neighborhood
  }

  if (verbose) cat("    Found", length(neighborhoods), "recruiter neighborhoods\n")

  bootstrap_samples <- list()

  for (b in 1:B) {
    if (verbose && b %% 100 == 0) cat("    Completed", b, "replicates\n")

    # Step 2: Sample recruiters with replacement (same number as original)
    sampled_recruiter_indices <- sample(1:length(neighborhoods), size = length(neighborhoods), replace = TRUE)

    # Step 3: Build bootstrap sample by combining sampled neighborhoods
    bootstrap_sample <- do.call(rbind, neighborhoods[sampled_recruiter_indices])

    # Reset row names and IDs for bootstrap sample
    rownames(bootstrap_sample) <- NULL
    bootstrap_sample[[id_col]] <- 1:nrow(bootstrap_sample)

    # Simplify recruitment structure for RDS compatibility
    # Make all recruiter IDs either -1 (seed) or point to valid IDs in the sample (avoiding self-recruitment)
    for (i in 1:nrow(bootstrap_sample)) {
      if (bootstrap_sample[[recruiter_col]][i] == -1) {
        # Keep as seed
        bootstrap_sample[[recruiter_col]][i] <- -1
      } else {
        # Assign random recruiter (not themselves)
        potential_recruiters <- setdiff(bootstrap_sample[[id_col]], bootstrap_sample[[id_col]][i])
        if (length(potential_recruiters) > 0) {
          bootstrap_sample[[recruiter_col]][i] <- sample(potential_recruiters, 1)
        } else {
          # If no potential recruiters, make it a seed
          bootstrap_sample[[recruiter_col]][i] <- -1
        }
      }
    }

    # Ensure at least one seed exists (to avoid RDS validation errors)
    if (!any(bootstrap_sample[[recruiter_col]] == -1)) {
      bootstrap_sample[[recruiter_col]][1] <- -1
    }

    # Note: We preserve duplicates (individuals can appear multiple times)
    # This is correct according to Yauck et al. algorithm

    bootstrap_samples[[b]] <- bootstrap_sample
  }

  return(bootstrap_samples)
}

#' Simple Chain Bootstrap Resampling Function
#'
#' A simplified chain bootstrap that resamples recruitment chains
#' without requiring the complex surveybootstrap package setup
chain_bootstrap_simple <- function(data, B = 500, id_col = "id", recruiter_col = "recruiter.id", traits = NULL, verbose = TRUE) {

  if (verbose) cat("  Chain bootstrap: resampling", B, "recruitment chains...\n")

  # Identify recruitment chains
  chains <- identify_recruitment_chains_simple(data, id_col, recruiter_col)

  bootstrap_samples <- list()

  for (b in 1:B) {
    if (verbose && b %% 100 == 0) cat("    Completed", b, "replicates\n")

    # Sample chains with replacement
    n_chains <- length(chains)
    sampled_chain_indices <- sample(1:n_chains, size = n_chains, replace = TRUE)

    # Combine sampled chains into bootstrap sample
    bootstrap_sample <- do.call(rbind, chains[sampled_chain_indices])
    rownames(bootstrap_sample) <- NULL

    # Reset IDs to be sequential
    bootstrap_sample[[id_col]] <- 1:nrow(bootstrap_sample)

    # Update recruiter relationships (simplified - avoid self-recruitment)
    non_seed_mask <- bootstrap_sample[[recruiter_col]] != -1
    if (any(non_seed_mask)) {
      # For non-seeds, assign random valid recruiter (not themselves)
      for (i in which(non_seed_mask)) {
        potential_recruiters <- setdiff(1:nrow(bootstrap_sample), i)
        if (length(potential_recruiters) > 0) {
          bootstrap_sample[[recruiter_col]][i] <- sample(potential_recruiters, 1)
        } else {
          bootstrap_sample[[recruiter_col]][i] <- -1  # Make it a seed if no alternatives
        }
      }
    }

    bootstrap_samples[[b]] <- bootstrap_sample
  }

  return(bootstrap_samples)
}

#' Identify Simple Recruitment Chains
#'
#' Identifies recruitment chains starting from seeds
identify_recruitment_chains_simple <- function(data, id_col = "id", recruiter_col = "recruiter.id") {

  # Start with seeds
  seeds <- data[data[[recruiter_col]] == -1, ]
  chains <- list()

  if (nrow(seeds) == 0) {
    # No clear seeds, treat each observation as its own chain
    for (i in 1:nrow(data)) {
      chains[[i]] <- data[i, ]
    }
  } else {
    # For simplicity, create chains by seed
    for (i in 1:nrow(seeds)) {
      seed_id <- seeds[[id_col]][i]

      # Find all recruits of this seed (direct recruits only for simplicity)
      recruits <- data[data[[recruiter_col]] == seed_id, ]

      # Create chain with seed + its recruits
      if (nrow(recruits) > 0) {
        chain <- rbind(seeds[i, ], recruits)
      } else {
        chain <- seeds[i, ]
      }

      chains[[i]] <- chain
    }
  }

  return(chains)
}




#### TESTING (commented out to prevent auto-execution when sourcing)

B <- 500
boot_samples <- bootstrap_rds_sample(
  rds_sample = rd.dd,
  method = "chain",   # c("tree", "neighboot", "chain", "simple", "ss"),
  B = B,
  traits = c("q8_a", "q11", "q5"),
  keep.vars = c("document_withholding_nsum", "pay_issues_nsum"),
  save_path = here::here("output", paste0("bootstrap_chain_",B,".rds") )
)







